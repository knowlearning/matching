authorize:
  sameDomain:
    postgres: same_domain_authorization
  crossDomain:
    postgres: cross_domain_authorization
postgres:
  tables: {}
  functions:
    same_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
    cross_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingDomain
        type: TEXT
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
  scopes: {}
agent: |
  import Agent, { getAgent } from 'npm:@knowlearning/agents/deno.js'

  const TagAgent = getAgent('tags.knowlearning.systems')

  const agentTags = await TagAgent.state('tags')

  function addTag(tagId, contentId) {
    if (!agentTags.value[tagId]) agentTags.value[tagId] = {}
    agentTags.value[tagId][contentId] = true
  }

  Agent.on('child', child => {
    const { environment: { user } } = child

    child.on('mutate', ({ scope, patch }) => {
      if (scope === 'tags') {
        patch.forEach(async ({ path, value }) => {
          if (path.length === 2) {
            const [ tagId, contentId ] = path
            if (!agentTags[tagId]) agentTags[tagId] = {}
            if (!value) {
              agentTags[tagId][contentId] = { user, partition: user, value: null }
            }
            else {
              agentTags[tagId][contentId] = { user, partition: user, value }
            }
          }
        })
      }
    })
  })