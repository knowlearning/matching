authorize:
  sameDomain:
    postgres: same_domain_authorization
  crossDomain:
    postgres: cross_domain_authorization
postgres:
  tables:
    matching_items:
      type: application/json;type=matching
      columns:
        name: TEXT
    select_from_pairs_items:
      type: application/json;type=select-from-pairs
      columns:
        name: TEXT
    rearrange_items:
      type: application/json;type=rearrange-items
      columns:
        name: TEXT
    sequence_items:
      type: application/json;type=sequence
      columns:
        name: TEXT
  queries:
    customised_items_report:
      domains:
        - app.pilaproject.org
        - thailand.pilaproject.org
        - polska-rct-2025.pilaproject.org
        - france-rct-2025.pilaproject.org
        - f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:9898
      body: |
        SELECT
          md.owner,
          COUNT(DISTINCT mi.id) AS "matching",
          COUNT(DISTINCT spi.id) AS "select-from-pairs",
          COUNT(DISTINCT ri.id) AS "rearrange-items",
          COUNT(DISTINCT si.id) AS "sequence",
          (COUNT(DISTINCT mi.id) + COUNT(DISTINCT spi.id) + COUNT(DISTINCT ri.id) + COUNT(DISTINCT si.id)) AS "total"
        FROM metadata md
        LEFT JOIN matching_items mi ON md.id = mi.id
        LEFT JOIN select_from_pairs_items spi ON md.id = spi.id
        LEFT JOIN rearrange_items ri ON md.id = ri.id
        LEFT JOIN sequence_items si ON md.id = si.id
        GROUP BY md.owner
        HAVING
          COUNT(DISTINCT mi.id) > 0 OR
          COUNT(DISTINCT spi.id) > 0 OR
          COUNT(DISTINCT ri.id) > 0 OR
          COUNT(DISTINCT si.id) > 0
        ORDER BY
          total DESC;
  functions:
    same_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
    cross_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingDomain
        type: TEXT
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
  scopes: {}
agent: |
  import Agent, { getAgent } from 'npm:@knowlearning/agents/deno.js'

  // TRANSLATION AGENT STUFF
  // const TRANSLATION_DOMAIN = 'f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:5889'
  const TRANSLATION_DOMAIN = 'translations.pilaproject.org'
  const TRANSLATABLE_TARGET_TYPE = 'application/json;type=translatable_target'

  const TranslationAgent = getAgent(TRANSLATION_DOMAIN)

  Agent.on('child', child => {
    child.on('mutate', async ({ id }) => {
      if (await isTranslatableItem(id)) {
        await handleTranslatableItem(id)
      }
    })
  })

  async function handleTranslatableItem(id) {
    const itemState = await TranslationAgent.state(id)
    const itemMetadata = await TranslationAgent.metadata(id)
    itemState.translations.paths.forEach(async path => {
      const translatableTargetName = `translatable_target/${JSON.stringify([id, ...path])}`
      const translatableTargetMetadata = await TranslationAgent.metadata(translatableTargetName)

      if (translatableTargetMetadata.active_type !== TRANSLATABLE_TARGET_TYPE) {
        translatableTargetMetadata.active_type = TRANSLATABLE_TARGET_TYPE
      }

      const translatableTarget = await TranslationAgent.state(translatableTargetName)
      const source_string = resolvePath([...path], itemState)

      translatableTarget.source_language = itemState.translations.source_language
      translatableTarget.source_string = source_string || null
      translatableTarget.path = [id, ...path]
      translatableTarget.ii = itemMetadata.ii
    })
  }

  function resolvePath(path, value) {
      while (path.length && value) value = value[path.shift()]
      return value
    }

  // hack to ignore too many session state requests
  const sessions = {}
  async function isTranslatableItem(id) {
    if (sessions[id]) return false

    const state = await Agent.state(id)
    const { name } = await Agent.metadata(id)

    if (name === 'sessions') sessions[id] = true

    const translations = state.translations

    if (!translations) return false
    const { source_language, paths } = translations
    if (!source_language) return false
    if (!paths) return false
  
    const validSourceLang = typeof source_language === 'string' && source_language.length >= 2
    const validPaths = Array.isArray(paths) && paths.every(p => Array.isArray(p))
    return validSourceLang && validPaths
  }
 
  // HANDLER AND DEFS FOR TAGS
  const TagAgent = getAgent('tags.knowlearning.systems')
  const agentTags = await TagAgent.state('tags')

  function addTag(tagId, contentId) {
    if (!agentTags.value[tagId]) agentTags.value[tagId] = {}
    agentTags.value[tagId][contentId] = true
  }

  Agent.on('child', child => {
    const { environment: { user } } = child

    child.on('mutate', ({ scope, patch }) => {
      if (scope === 'tags') {
        patch.forEach(async ({ path, value:patchValue }) => {
          if (path.length === 2) {
            const [ tagId, contentId ] = path
            const { value, partition=user } = patchValue
            if (!agentTags[tagId]) agentTags[tagId] = {}
            agentTags[tagId][contentId] = { contributor: user, partition, value }
          }
        })
      }
    })
  })

  const xApiAgent = getAgent('xapi.knowlearning.systems')
  Agent.on('child', child => {
      const { environment: { user } } = child
      child.on('mutate', ({ id, scope, patch, context }) => {
          patch.forEach(async ({ path, value }) => {
            if (path[0] === 'xapi' && path.length === 1 && value) {
              const x = await xApiAgent.state(`xapi/${Agent.uuid()}`)
              Object.assign(x, {
                  ...value,
                  source: id,
                  context
              })
            }
          })
      })
  })
